{
  "scopeName": "source.overpassql",
  "patterns": [{ "include": "#TOP" }],
  "repository": {
    "TOP": {
      "patterns": [
        { "include": "#whitespace" },
        { "include": "#comments" },

        { "include": "#start-statement-context" }
      ]
    },
    "fallback": {
      "TODO": "Use this or remove it",
      "comment": "Fallback rule when we don't know what the current context is",
      "name": "meta.overpassql.unknown",
      "begin": "(?=.)",
      "end": "(;)|\\{|\\}",
      "patterns": [
        { "include": "#whitespace" },
        { "include": "#comments" },

        { "include": "#number-literal" },
        { "include": "#string-literal" },
        
        { "include": "#query-type" },
        { "include": "#assign-variable" },
        { "include": "#input-set" }
      ]
    },
    "start-statement-context": {
      "comment": "Starts a statement context",
      "name": "meta.context.overpassql.statement",
      "begin": "(?=.)",
      "end": "(?<=;)",
      "patterns": [
        { "include": "#whitespace" },
        { "include": "#comments" },

        { "include": "#settings-statement-bracket-colon" },
        { "include": "#query-statement-query-type" },
        { "include": "#out-statement-keyword" },
        { "include": "#item-statement-dot-semicolon" },
        { "include": "#operator-statement-operator-symbol" },
        { "include": "#function-call-statement-function-name" },
        { "include": "#function-word-statement-word-function-name" },
        
        { "include": "#statement-grouping" },
        { "include": "#block-construct" },

        { "include": "#generic-function-statement-generic-name" },
        { "include": "#generic-statement" }
      ]
    },

    "statement-grouping": {
      "comment": "Matches a union or difference group { '(' ==> ')' } ",
      "name": "meta.overpassql.group",
      "begin": "\\(",
      "end": "\\)",
      "beginCaptures": {
        "0": {
          "name": "punctuation.section.group.begin.overpassql punctuation.section.parens.begin.overpassql"
        }
      },
      "endCaptures": {
        "0": {
          "name": "punctuation.section.group.end.overpassql punctuation.section.parens.end.overpassql"
        }
      },
      "patterns": [
        { "include": "#whitespace" },
        { "include": "#comment" },

        { "include": "#set-difference-operator" },
        { "include": "#start-statement-context" }
      ]
    },

    "block-construct": {
      "comment": "Matches a block construct { <( <block-name> )> ==> '}' }",
      "name": "meta.overpassql.statement.block",
      "begin": "if|else|foreach|for|complete|retro|compare",
      "end": "(?<=[;)}])",
      "beginCaptures": {
        "0": {
          "name": "keyword.control.overpassql"
        }
      },
      "patterns": [
        { "include": "#whitespace" },
        { "include": "#comment" },

        { "include": "#parens-evaluator" },
        { "include": "#block-group" }
      ]
    },
    "block-group": {
      "comment": "Matches a block",
      "name": "meta.block.overpassql",
      "begin": "\\{",
      "end": "\\}",
      "beginCaptures": {
        "0": {
          "name": "punctuation.section.block.begin.overpassql punctuation.section.braces.begin"
        }
      },
      "endCaptures": {
        "0": {
          "name": "punctuation.section.block.end.overpassql punctuation.section.end.begin"
        }
      },
      "patterns": [
        { "include": "#whitespace" },
        { "include": "#comment" },

        { "include": "#start-statement-context" }
      ]
    },

    "settings-statement-bracket-colon": {
      "comment": "Matches something that starts like a setting declaration",
      "name": "meta.overpassql.statement.settings-declaration",
      "begin": "(?=\\[\\s*+(?:/\\*(?:[^*]|\\*[^/])*+\\*/\\s*+)*+\\w++\\s*+(?:/\\*(?:[^*]|\\*[^/])*+\\*/\\s*+)*+:)",
      "end": ";",
      "endCaptures": {
        "0": {
          "name": "punctuation.terminator.statement.overpassql"
        }
      },
      "patterns": [
        { "include": "#whitespace" },
        { "include": "#comments" },

        { "include": "#setting-bracket-colon" }
      ]
    },
    "query-statement-query-type": {
      "comment": "Matches a query statement { <query-type> ==> ';' }",
      "begin": "(?=(?:node|way|relation|rel|derived|area|nwr)\\b)",
      "name": "meta.overpassql.statement.query",
      "end": ";",
      "endCaptures": {
        "0": {
          "name": "punctuation.terminator.statement.overpassql"
        }
      },
      "patterns": [
        { "include": "#whitespace" },
        { "include": "#comments" },

        { "include": "#query-type" },
        { "include": "#query-filter" },
        { "include": "#assign-variable" }
      ]
    },
    "out-statement-keyword": {
      "comment": "Matches an out statement { [<input-set><ws-comment>]? 'out' ==> ';' }",
      "name": "meta.overpassql.statement.out",
      "begin": "(?=(?:\\.\\s*+(?:/\\*(?:[^*]|\\*[^/])*+\\*/\\s*+)*+[a-zA-Z][a-zA-Z0-9]*+\\s*+(?:/\\*(?:[^*]|\\*[^/])*+\\*/\\s*+)*+)?+out)",
      "end": ";",
      "endCaptures": {
        "0": {
          "name": "punctuation.terminator.statement.overpassql"
        }
      },
      "patterns": [
        { "include": "#whitespace" },
        { "include": "#comments" },

        { "include": "#input-set" },
        { "include": "#out-keyword" },
        { "include": "#out-parameter" }
      ]
    },
    "item-statement-dot-semicolon": {
      "comment": "Matches an item statement { <input-set> <ws-comment> ';' }",
      "name": "meta.overpassql.statement.item",
      "begin": "(?=\\.\\s*+(?:/\\*(?:[^*]|\\*[^/])*+\\*/\\s*+)*+[a-zA-Z][a-zA-Z0-9]*+(?:/\\*(?:[^*]|\\*[^/])*+\\*/\\s*+)*+;)",
      "end": ";",
      "endCaptures": {
        "0": {
          "name": "punctuation.terminator.statement.overpassql"
        }
      },
      "patterns": [
        { "include": "#whitespace" },
        { "include": "#comments" },

        { "include": "#input-set" }
      ]
    },
    "operator-statement-operator-symbol": {
      "comment": "Matches an operator statement { [<input-set><ws-comment>]? <operator-name> ==> ';' }",
      "name": "meta.overpassql.statement.operator",
      "begin": "(?=(?:\\.\\s*+(?:/\\*(?:[^*]|\\*[^/])*+\\*/\\s*+)*+[a-zA-Z][a-zA-Z0-9]*+\\s*+(?:/\\*(?:[^*]|\\*[^/])*+\\*/\\s*+)*+)?+(?:<<|>>|<|>))",
      "end": ";",
      "endCaptures": {
        "0": {
          "name": "punctuation.terminator.statement.overpassql"
        }
      },
      "patterns": [
        { "include": "#whitespace" },
        { "include": "#comments" },
        
        { "include": "#input-set" },
        { "include": "#operator-names" },
        { "include": "#assign-variable" }
      ]
    },
    "function-call-statement-function-name": {
      "comment": "Matches a function call statement { [<input-set><ws-comment>]? <function-name> ==> ';' }",
      "name": "meta.overpassql.statement.function-call",
      "begin": "(?=(?:\\.\\s*+(?:/\\*(?:[^*]|\\*[^/])*+\\*/\\s*+)*+[a-zA-Z][a-zA-Z0-9]*+\\s*+(?:/\\*(?:[^*]|\\*[^/])*+\\*/\\s*+)*+)?+(?:is_in|timeline))",
      "end": ";",
      "endCaptures": {
        "0": {
          "name": "punctuation.terminator.statement.overpassql"
        }
      },
      "patterns": [
        { "include": "#whitespace" },
        { "include": "#comments" },

        { "include": "#input-set" },
        { "include": "#function-call" },
        { "include": "#assign-variable" }
      ]
    },
    "function-word-statement-word-function-name": {
      "comment": "Matches a word-function invocation statement { [<input-set><ws-comment>]? <word-function-names> ==> ';' }",
      "name": "meta.overpassql.statement.word-function",
      "begin": "(?=(?:\\.\\s*+(?:/\\*(?:[^*]|\\*[^/])*+\\*/\\s*+)*+[a-zA-Z][a-zA-Z0-9]*+\\s*+(?:/\\*(?:[^*]|\\*[^/])*+\\*/\\s*+)*+)?+(?:local|convert|make))",
      "end": ";",
      "endCaptures": {
        "0": {
          "name": "punctuation.terminator.statement.overpassql"
        }
      },
      "patterns": [
        { "include": "#whitespace" },
        { "include": "#comments" },

        { "include": "#input-set" },
        { "include": "#word-function-names" },
        { "include": "#word-function-param" },
        { "include": "#assign-variable" }
      ]
    },
    "generic-function-statement-generic-name": {
      "comment": "Matches a generic function statement { [<input-set><ws-comment>]?+ <generic-function-names> ==> ';' }",
      "name": "meta.overpassql.statement.generic-function",
      "begin": "(?=(?:\\.\\s*+(?:/\\*(?:[^*]|\\*[^/])*+\\*/\\s*+)*+[a-zA-Z][a-zA-Z0-9]*+\\s*+(?:/\\*(?:[^*]|\\*[^/])*+\\*/\\s*+)*+)?+\\w)",
      "end": ";",
      "endCaptures": {
        "0": {
          "name": "punctuation.terminator.statement.overpassql"
        }
      },
      "patterns": [
        { "include": "#whitespace" },
        { "include": "#comments" },

        { "include": "#input-set" },
        { "include": "#generic-function-call" },
        { "include": "#assign-variable" }
      ]
    },

    "whitespace": {
      "comment": "Matches whitespace",
      "name": "meta.overpassql.whitespace",
      "match": "[ \\t]++"
    },

    "bareword": {
      "comment": "Matches a bareword",
      "name": "meta.overpassql.bareword",
      "match": "[a-zA-Z][a-zA-Z0-9]*+"
    },
    "skip-term": {
      "comment": "Matches a term",
      "name": "meta.overpassql.term",
      "match": "[a-zA-Z][a-zA-Z0-9]*+"
    },

    "comments": {
      "comment": "Matches comments",
      "patterns": [
        { "include": "#block-comment" },
        { "include": "#line-comment" }
      ]
    },
    "block-comment": {
      "comment": "Matches a block comment",
      "name": "comment.block.overpassql",
      "begin": "\\/\\*",
      "end": "\\*\\/",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.comment.begin.overpassql"
        }
      },
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.comment.end.overpassql"
        }
      }
    },
    "line-comment": {
      "comment": "Matches a line comment",
      "name": "comment.double-slash.overpassql",
      "match": "(//).*+$",
      "captures": {
        "1": {
          "name": "punctuation.definition.comment.begin.overpassql"
        }
      }
    },

    "number-literal": {
      "comment": "Matches a number literal\nNB the minus sign is an operator and not part of the literal",
      "match": "(?<!\\w)(-)?+((?:[1-9][0-9]*+|0)(?:\\.[0-9]++)?+)(?!\\w)",
      "captures": {
        "1": {
          "name": "keyword.operator.arithmetic.overpassql"
        },
        "2": {
          "name": "constant.numeric.overpassql"
        }
      }
    },
    "positive-integer": {
      "comment": "Matches a positive integer literal",
      "match": "(?<!\\w)([1-9][0-9]*+|0)(?!\\w)",
      "captures": {
        "0": {
          "name": "constant.numeric.overpassql"
        }
      }
    },

    "string-literal": {
      "patterns": [
        { "include": "#qq-string" },
        { "include": "#q-string" }
      ]
    },
    "qq-string": {
      "comment": "Matches a double quoted string",
      "name": "string.quoted.double.overpassql meta.string.overpassql",
      "begin": "\"",
      "end": "\"",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.string.begin.overpassql"
        }
      },
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.string.end.overpassql"
        }
      },
      "patterns": [
        { "include": "#string-escape" }
      ]
    },
    "q-string": {
      "comment": "Matches a single quoted string",
      "name": "string.quoted.single.overpassql meta.string.overpassql",
      "begin": "'",
      "end": "'",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.string.begin.overpassql"
        }
      },
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.string.end.overpassql"
        }
      },
      "patterns": [
        { "include": "#string-escape" }
      ]
    },
    "string-escape": {
      "comment": "Matches a valid backslash-escape sequence within a string",
      "name": "constant.character.escape.overpassql",
      "match": "\\\\[nt\"'\\\\]|\\\\u[0-9a-fA-F]{4}"
    },

    "expression": {
      "comment": "Matches an expression",
      "patterns": [
        { "include": "#pair-expression" },
        { "include": "#number-literal" },
        { "include": "#string-literal" },
        { "include": "#setting-special-fields" },
        { "include": "#tag-expression" },
        { "include": "#query-type" },
        { "include": "#parens-expression" }
      ]
    },
    "pair-expression": {
      "comment": "Matches a thing that looks like a pair { <term> '(' ==> ')' }",
      "name": "meta.overpassql.pair",
      "begin": "([a-zA-Z][a-zA-Z0-9]*+)(\\()",
      "end": "\\)",
      "beginCaptures": {
        "1": {
          "name": "entity.other.overpassql"
        },
        "2": {
          "name": "punctuation.section.group.begin.overpassql punctuation.section.parens.begin.overpassql"
        }
      },
      "endCaptures": {
        "0": {
          "name": "punctuation.section.group.end.overpassql punctuation.section.parens.end.overpassql"
        }
      },
      "patterns": [
        { "include": "#whitespace" },
        { "include": "#comments" },
        { "include": "#parameter-separator" },
        { "include": "#expression" },

        { "include": "#skip-term" }
      ]
    },
    "parens-expression": {
      "comment": "Matches a parenthesized expression { '(' ==> ')' }",
      "begin": "\\(",
      "end": "\\)",
      "beginCaptures": {
        "0": {
          "name": "punctuation.section.group.begin.overpassql punctuation.section.parens.begin.overpassql"
        }
      },
      "endCaptures": {
        "0": {
          "name": "punctuation.section.group.end.overpassql punctuation.section.parens.end.overpassql"
        }
      },
      "patterns": [
        { "include": "#whitespace" },
        { "include": "#comments" },

        { "include": "#expression" },
        { "include": "#parameter-separator" }
      ]
    },
    "tag-expression": {
      "comment": "Matches a tag accessor { <( '::' )> <ws-comment> [ <start-of string> | <start-of term> ] ==> <[ , ) ]> }",
      "name": "meta.overpassql.tag-access",
      "begin": "(::)(?=\\s*+(?:/\\*(?:[^*]|\\*[^/])*+\\*/\\s*+)*+[\"'a-zA-Z])",
      "end": "(?=[,)])",
      "beginCaptures": {
        "0": {
          "name": "punctuation.accessor.overpassql"
        }
      },
      "patterns": [
        { "include": "#whitespace" },
        { "include": "#comments" },
        { "include": "#string-literal" },
        { "include": "#bareword" }
      ]
    },

    "assign-variable": {
      "comment": "Matches a variable assignment if the arrow and the variable are on the same line, and if it ends with a semicolon or a newline\nNB doesn't handle comments",
      "name": "meta.overpassql.output-set",
      "match": "(->)\\s*+(\\.)\\s*+([_a-zA-Z][_a-zA-Z0-9]*+)(?=\\s*+(?:;|$))",
      "captures": {
        "1": {
          "name": "keyword.operator.assignment.overpassql"
        },
        "2": {
          "name": "punctuation.definition.variable.overpassql"
        },
        "3": {
          "name": "variable.other.overpassql"
        }
      }
    },
    "input-set": {
      "comment": "Matches a variable preceded by a dot (on the same line)",
      "match": "(\\.)\\s*+([_a-zA-Z][_a-zA-Z0-9]*+)",
      "captures": {
        "1": {
          "name": "punctuation.definition.variable.overpassql"
        },
        "2": {
          "name": "variable.other.overpassql"
        }
      }
    },

    "set-difference-operator": {
      "comment": "Matches the minus operator for set difference",
      "name": "keyword.operator.logical.overpassql",
      "match": "-"
    },

    "parens-evaluator": {
      "comment": "Matches an evaluator in parentheses",
      "name": "meta.overpassql.evaluator-group",
      "begin": "\\(",
      "end": "\\)",
      "beginCaptures": {
        "0": {
          "name": "punctuation.section.group.begin.overpassql punctuation.section.parens.begin.overpassql"
        }
      },
      "endCaptures": {
        "0": {
          "name": "punctuation.section.group.end.overpassql punctuation.section.parens.end.overpassql"
        }
      },
      "patterns": [
        { "include": "#whitespace" },
        { "include": "#comment" },

        { "include": "#evaluator" }
      ]
    },
    "evaluator": {
      "comment": "Matches an evaluator",
      "patterns": [
        { "include": "#whitespace" },
        { "include": "#comments" },

        { "include": "#evaluator-operator" },
        { "include": "#string-literal" },
        { "include": "#number-literal" },

        { "include": "#evaluator-variable" },
        { "include": "#evaluator-field-access" },
        { "include": "#builtin-evaluator-function-name" },
        { "include": "#evaluator-function-name" },
        { "include": "#evaluator-function-params" }
      ]
    },
    "evaluator-variable": {
      "comment": "Matches a set variable within an evaluator statement { <term> <before '.'> }",
      "name": "variable.other.overpassql",
      "match": "([a-zA-Z][a-zA-Z0-9]*+)(?=\\.)"
    },
    "builtin-evaluator-function-name": {
      "comment": "Matches a built-in function name within an evaluator statement { <builtin-function-name> <before '('> }",
      "name": "meta.overpassql.evaluator.function-name",
      "match": "(\\.)?+(id|type|is_tag|keys|version|timestamp|changeset|uid|user|count_tags|count_members|count_distinct_members|count_by_role|count_distinct_by_role|per_member|per_vertex|pos|mtype|ref|role|angle|is_closed|geom|length|lat|lon|lstr|poly|u|set|min|max|sum|count|gcat|number|is_number|suffix|abs|date|is_date|center|tracehull|lrs_in|lrs_isect|lrs_union|lrs_min|lrs_max)(?=\\()",
      "captures": {
        "1": {
          "name": "punctuation.accessor.overpassql"
        },
        "2": {
          "name": "support.function.overpassql"
        }
      }
    },
    "evaluator-function-name": {
      "comment": "Matches a function name within an evaluator statement { <term> <before '('> } ",
      "name": "meta.overpassql.evaluator.function-name",
      "match": "(\\.)?+([a-zA-Z][a-zA-Z0-9]*+)(?=\\()",
      "captures": {
        "1": {
          "name": "punctuation.accessor.overpassql"
        },
        "2": {
          "name": "variable.function.overpassql"
        }
      }
    },
    "evaluator-field-access": {
      "comment": "Matches a field access within an evaluator statement { '.' <term> <!before '('> } ",
      "name": "meta.overpassql.evaluator.field-access",
      "match": "(\\.)([a-zA-Z][a-zA-Z0-9]*+)(?!\\()",
      "captures": {
        "1": {
          "name": "punctuation.accessor.overpassql"
        },
        "2": {
          "name": "variable.other.member.overpassql"
        }
      }
    },
    "evaluator-function-params": {
      "comment": "Matches the parenthesized function parameters within an evaluator statement { '(' ==> ')' } ",
      "name": "meta.group.overpassql meta.parens.overpassql meta.overpassql.function.params",
      "begin": "\\(",
      "end": "\\)",
      "beginCaptures": {
        "0": {
          "name": "punctuation.section.group.begin.overpassql punctuation.section.parens.begin.overpassql"
        }
      },
      "endCaptures": {
        "0": {
          "name": "punctuation.section.group.end.overpassql punctuation.section.parens.end.overpassql"
        }
      },
      "patterns": [
        { "include": "#whitespace" },
        { "include": "#comments" },

        { "include": "#parameter-separator" },
        { "include": "#evaluator" }
      ]
    },

    "setting-bracket-colon": {
      "comment": "Matches a something that looks like a setting: { <( '[' )> <comment-ws> \\w+ <comment-ws> ':' ==> ']' }\nOnly handles inline comments",
      "name": "meta.overpassql.setting",
      "begin": "(\\[)(?=\\s*+(?:/\\*(?:[^*]|\\*[^/])*+\\*/\\s*+)*+\\w++\\s*+(?:/\\*(?:[^*]|\\*[^/])*+\\*/\\s*+)*+:)",
      "end": "\\]",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.brackets.begin.overpassql"
        }
      },
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.brackets.end.overpassql"
        }
      },
      "patterns": [
        { "include": "#whitespace" },
        { "include": "#comments" },

        { "include": "#setting-name" },
        { "include": "#setting-param" },
        { "include": "#setting-separator" },
        { "include": "#parameter-separator" }
      ]
    },
    "setting-name": {
      "comment": "Matches the name of a setting",
      "name": "keyword.other.setting",
      "match": "\\b(timeout|maxsize|out|bbox|date|diff|adiff)\\b"
    },
    "setting-separator": {
      "comment": "Matches the colon in a setting option",
      "name": "punctuation.separator.delimiter.colon.overpassql",
      "match": ":"
    },
    "setting-param": {
      "patterns": [
        { "include": "#setting-test" },
        { "include": "#setting-special-fields" },
        { "include": "#parameter-separator" },
        { "include": "#expression" }
      ]
    },
    "parameter-separator": {
      "comment": "Matches a comma",
      "name": "punctuation.separator.delimiter.comma.overpassql",
      "match": ","
    },
    "setting-test": {
      "name": "meta.overpassql.keyword.colon-colon-id",
      "match": "::id"
    },
    "setting-special-fields": {
      "comment": "Matches special field names in settings",
      "name": "meta.overpassql.setting.special-field",
      "match": "(::)(id|type|otype|lat|lon|version|timestamp|changeset|uid|user)\\b|(::)(count)(?:(:)(nodes|ways|relations|areas))?+\\b",
      "captures": {
        "1": {
          "name": "punctuation.accessor.overpassql"
        },
        "2": {
          "name": "support.constant.overpassql"
        },
        "3": {
          "name": "punctuation.accessor.overpassql"
        },
        "4": {
          "name": "support.constant.overpassql"
        },
        "5": {
          "name": "punctuation.accessor.overpassql"
        },
        "6": {
          "name": "support.constant.overpassql"
        }
      }
    },
    
    "query-type": {
      "comment": "Matches the type of a query",
      "match": "\\b(node|way|relation|rel|derived|area|nwr)\\b",
      "name": "keyword.other.query.overpassql"
    },
    "query-filter": {
      "patterns": [
        { "include": "#query-filter-haskv" },
        { "include": "#query-filter-intersect" },
        { "include": "#query-filter-paren" }
      ]
    },
    "query-filter-haskv": {
      "comment": "Matches a kv filter\nNB We don't validate the syntax",
      "name": "meta.overpassql.query.filter.kv",
      "begin": "\\[",
      "end": "\\]",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.brackets.begin.overpassql"
        }
      },
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.brackets.end.overpassql"
        }
      },
      "patterns": [
        { "include": "#whitespace" },
        { "include": "#comments" },

        { "include": "#query-filter-haskv-operators" },
        { "include": "#query-filter-haskv-insensitive"},
        { "include": "#string-literal" },

        { "include": "#bareword" }
      ]
    },
    "query-filter-haskv-operators": {
      "comment": "Matches an operator used in a kv query filter",
      "name": "keyword.operator.logical.overpassql",
      "match": "=|!=|~|!~|!"
    },
    "query-filter-haskv-insensitive": {
      "comment": "Matches the case-insensitive switch if it's on the same line as the closing bracket",
      "name": "keyword.operator.logical.overpassql",
      "match": "(,)\\s*+(i)\\s*+(?=\\])",
      "captures": {
        "1": {
          "name": "punctuation.separator.delimiter.comma.overpassql"
        },
        "2": {
          "name": "support.constant.overpassql.i"
        }
      }
    },
    "query-filter-intersect": {
      "comment": "Matches a set intersection in a query filter if the dot and the variable are on the same line\nNB doesn't handle comments",
      "match": "(\\.)\\s*+([_a-zA-Z][_a-zA-Z0-9]*+)",
      "name": "meta.overpassql.query.filter.intersect",
      "captures": {
        "1": {
          "name": "keyword.operator.arithmetic.overpassql.intersect"
        },
        "2": {
          "name": "variable.other.overpassql"
        }
      }
    },
    "query-filter-paren": {
      "comment": "Matches a parenthesized query filter",
      "name": "meta.group.overpassql meta.parens.overpassql meta.overpassql.query.filter.parens",
      "begin": "\\(",
      "end": "\\)",
      "beginCaptures": {
        "0": {
          "name": "punctuation.section.group.begin.overpassql punctuation.section.parens.begin.overpassql"
        }
      },
      "endCaptures": {
        "0": {
          "name": "punctuation.section.group.end.overpassql punctuation.section.parens.end.overpassql"
        }
      },
      "patterns": [
        { "include": "#whitespace" },
        { "include": "#comments" },

        { "include": "#query-filter-keywords" },
        { "include": "#evaluator" },
        { "include": "#query-filter-separator" },
        { "include": "#parameter-separator" },
        { "include": "#expression" }
      ]
    },
    "query-filter-keywords": {
      "comment": "Matches a keyword used in a query filter",
      "name": "keyword.other.overpassql meta.overpassql.query.filter.parens.keyword",
      "match": "\\b(n|w|r|bn|bw|br|id|around|poly|newer|changed|user|uid|area|pivot|if)\\b"
    },
    "query-filter-separator": {
      "comment": "Matches the colon in a query filter",
      "name": "punctuation.separator.delimiter.colon.overpassql",
      "match": ":"
    },

    "out-keyword": {
      "comment": "Matches the out keyword",
      "name": "keyword.other.overpassql",
      "match": "out\\b"
    },
    "out-parameter": {
      "patterns": [
        { "include": "#out-parameter-keyword" },
        { "include": "#positive-integer" },
        { "include": "#parens-expression" }
      ]
    },
    "out-parameter-keyword": {
      "comment": "Matches a parameter for the out statement",
      "match": "count|ids|skel|body|tags|meta|noids|geom|center|bb|asc|qt",
      "captures": {
        "0": {
          "name": "support.constant.overpassql.out"
        }
      }
    },

    "operator-names": {
      "comment": "Matches operators statement keywords",
      "name": "keyword.operator.other.overpassql",
      "match": "<<|>>|<|>"
    },
    
    "function-call": {
      "comment": "Matches a built-in function call { <function-call-names> '(' ==> ')' }",
      "name": "meta.function-call.overpassql",
      "begin": "(is_in|timeline)(\\()",
      "end": "\\)",
      "beginCaptures": {
        "1": {
          "name": "support.function.overpassql"
        },
        "2": {
          "name": "punctuation.section.group.begin.overpassql punctuation.section.parens.begin.overpassql"
        }
      },
      "endCaptures": {
        "0": {
          "name": "punctuation.section.group.end.overpassql punctuation.section.parens.end.overpassql"
        }
      },
      "patterns": [
        { "include": "#whitespace" },
        { "include": "#comments" },

        { "include": "#expression" },
        { "include": "#parameter-separator" }
      ]
    },
    "function-call-names": {
      "comment": "Matches built-in function-call function names",
      "name": "support.function.overpassql",
      "match": "is_in|timeline"
    },

    "word-function-names": {
      "comment": "Matches built-in word-function names",
      "name": "support.function.overpassql",
      "match": "local|convert|make"
    },
    "word-function-param": {
      "comment": "Matches a word-function parameter",
      "patterns": [
        { "include": "#query-type" },
        { "include": "#tag-match" },
        { "include": "#parameter-separator" }
      ]
    },
    "tag-match": {
      "comment": "Matches a (osm object) tag matching rule (vaguely)",
      "patterns": [
        { "include": "#whitespace" },
        { "include": "#comments" },

        { "include": "#tag-operators" },
        { "include": "#tag-correspondance" },
        { "include": "#tag-keywords" },
        { "include": "#evaluator" },
        { "include": "#string-literal" },
        
        { "include": "#bareword" }
      ]
    },
    "tag-operators": {
      "comment": "Matches operators used in tag matching",
      "name": "keyword.operator.overpassql",
      "match": "!"
    },
    "tag-correspondance": {
      "comment": "Matches the equal sign used in tag matching",
      "name": "keyword.operator.assignment.overpassql",
      "match": "="
    },
    "tag-keywords": {
      "comment": "Matches special keywords used in tag matching",
      "name": "meta.overpassql.tag-match.keyword",
      "match": "(::)(id)?+",
      "captures": {
        "1": {
          "name": "keyword.other.overpassql.key"
        },
        "2": {
          "name": "keyword.other.overpassql.id"
        }
      }
    },

    "generic-function-call": {
      "comment": "Matches a generic function call { <generic-function-call-name> '(' ==> ')' }",
      "name": "meta.function-call.overpassql.generic",
      "begin": "(\\w++)(\\()",
      "end": "\\)",
      "beginCaptures": {
        "1": {
          "name": "variable.function.overpassql"
        },
        "2": {
          "name": "punctuation.section.group.begin.overpassql punctuation.section.parens.begin.overpassql"
        }
      },
      "endCaptures": {
        "0": {
          "name": "punctuation.section.group.end.overpassql punctuation.section.parens.end.overpassql"
        }
      },
      "patterns": [
        { "include": "#whitespace" },
        { "include": "#comments" },

        { "include": "#expression" },
        { "include": "#parameter-separator" }
      ]
    }
  }
}
